
import org.apache.spark.sql.SparkSession
import org.apache.spark.ml.regression.LinearRegression
import org.apache.spark.ml.feature.VectorAssembler
import org.apache.spark.ml.evaluation.RegressionEvaluator
val spark = SparkSession.builder.appName("LinearRegressionDemo").getOrCreate()
val data = spark.read.option("header", "true").option("inferSchema", "true").csv("file:///home/nhomcuahop/dientichgiaban.csv")
data.show()
val featureColumns = Array("square_feet")
val vectorAssembler = new VectorAssembler().setInputCols(featureColumns).setOutputCol("features")
val dataWithFeatures = vectorAssembler.transform(data)
val Array(trainData, testData) = dataWithFeatures.randomSplit(Array(0.8, 0.2))
val lr = new LinearRegression()
  .setFeaturesCol("features")
  .setLabelCol("price")
  .setMaxIter(100) 
  .setRegParam(0.01) 
val model = lr.fit(trainData)
val predictions = model.transform(testData)
val evaluator = new RegressionEvaluator().setLabelCol("price").setPredictionCol("prediction").setMetricName("rmse")
val rmse = evaluator.evaluate(predictions)
println(s"Root Mean Squared Error (RMSE): $rmse")
println(s"Coefficients: ${model.coefficients}")
println(s"Intercept: ${model.intercept}")
spark.stop()

